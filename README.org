* tribes.rip

** Purpose
- Create a communication platform, that handles personal (Signal, Facebook), and Work (Linkedin)
- Can add people, tag them, and organize them in a graph (by group).
   - EX: School, Work(Edmunds.com), etc.
   
*** Main Differentiating Feature:
- People have to communicate to you through a "queue", and you can have various queues/message formats availables.
   - EX: Send me your resume queue, that hold 5 messages, requires a 1 page pdf uploaded.
- Because you can set limitations/define how people interact with you, you can freely "add anybody" to your graph, and just restrict them to "only message me about projects", or something. Or allow them 1/message per year, where they can send you anything. So you can add people, put them in boxes/categories, and restrict access if you don't want to an open DM with them (which is why people don't just free-willingly add people, so they don't get spammed). But because with the queues/restrictions you can control comms, this allows the people you meet, to be kept in your graph, and you have that constant pulse/communication outlet with them, available if needed.   
  
** Features
- Profile page.
   - Queues (what avenues are available, for someone to contact you).
   - Links (crypto, email, etc). What is available, is dependent on what access you've given that person.
   - Anonymous messages supported (you define what they see, what they can send you).
   - Customizable profile page/profile tabs (can have a blog tab (iframe your blog), YouTube tab (iframe your YouTube channel).
   - Ability to send/receive payment (stripe, monero, etc). Can have a "queue" that is paid.
     - EX: "Resume Review": $5.
   - Hook into calendar, for scheduling. (EX: Call with me about X, can have blocked out times, using calendar, and give that to them to schedule).
   - Think of any other "profile" page feature, and it can likely be added (piletexod.us, gym feed, exercise feed, study feed, etc. Anything that can be tracked and displayed, can be shown). This can basically be a customizable/programmable super app: https://piped.kavin.rocks/watch?v=82PkhfvwxFc&list=PLZfuUWMTtMcC1DZF6HxJhqsGrBXu8Jzi7&index=31
      - Anything can be iframed, and thus apps can be embeded in your profile page.
- BlitzKrieg (main target is scrum teams) (Bewegungskrieg - https://old.reddit.com/r/MilitaryHistory/comments/qug054/is_the_blitzkrieg_an_actual_german_military/)
   - For an organization, use CRDT, list stories.
   - Skip Scrum standup, publish update in CRDT form for the day, and can list who you need to meet with to address blockers (can list what you want to talk about).
   - Have a scheduling algorithm, that say for a  1 hour time block, using some scheduling rules, schedules these for that block, so that everything in the scrum is addressed. Maybe link to a Video sharing link, or do p2p video.
   - Can publish daily progress, meeting links, to a git repo.
      - This fixes the 30-60 minute synchronous scrums. Instead, with Blitzkrieg, you have asynchronous scheduling of synchronous meetings, only with people who need to be there. Meetings are recorded, and CRDT data for that daily entry is recorded (for example, summaries of discussion). With the current way SCRUM works, you have to listen to stories you don't work on, and here about things you have nothing to do with, which saps productivity. An a ideal world, with blitzkrieg, you only meet with people you need to, about things you're working on, for a given purpose. This is the most efficient way. You just need a web app with CRDT to input what is needed to be addressed, and with who, and then the app will do scheduling. If scheduling needs to go outside the SCRUM synchronous time block, because tribes.rip has access to your calendar, you can schedule later in they day if possible, or even earlier to the day. (Scheduling does not need to be limited to a 1 hour SCRUM time block, but it can be a default, if earlier/later is not wanted, or not needed).
    - Market Research:
         - https://reclaim.ai/
         - https://timeto.morgen.so/
   
** Other things to consider
- Client/Server protocol. Run Server self-hosted or on VPS,etc. It stores your queue. Then you're client (Web/React, or emacs, cli), can download, process
- Self Host ability.
- Maybe do something with carp, so a realtime lisp can be used: https://github.com/carp-lang/Carp
   - Maybe with REPL, can live-update things.
- Maybe something with Rust/Go for a server.
- Maybe some deployment strategy, where you can roll out an A/B, so you can verify that your updated server logic works. (A basic way to control deployments).
- Save queue state to a file/DB, so that if restart, messages are not lost.
- Ability to send data back to sender of message.
   - "Read" notification.
   - "Queue" position value.
   - "Queue" velocity (how fast the person is processing your queue. For example, if it's at 0/20 for a week, you can ask if they can take a look at the queue, and process your message).
   - Maybe they only "looked at the title", and discarded the message. So you can know this (could be optional).
   - Optional statistics: Spent 5 minutes on your message.
- Ability to read a specific message in a queue (doesn't need to be FIFO). Can be a fixed sized array.
   - So you can just view a given message from someone, if needed.
- Add the "queue" aspect, to external ingestions.
  - YouTube, RSS, etc.
  - Can limit things. For example: Subscribe to this youtube channel, but only take 1 video/week, and stick it in my queue.
- DSL, to make configuring rules simpler.

* How:
- Use whatever tech stack Obsidian is using: https://obsidian.md/
  - I believe this is React, and ReactNative for mobile.
** Rust backend messaging server, React front end.
- https://libreddit.eu.org/r/rust/comments/10u8euv/rest_api_framework_in_rust/
- https://libreddit.eu.org/r/rust/comments/vezbjf/createrustapp_added_ssr_templates_and_esbuild/
- https://libreddit.eu.org/r/rust/comments/s0g9x9/thoughts_on_poem_axum/
- https://github.com/Wulf/create-rust-app
- Use Axum (more popular, will have to skip create-rust-app)
  - https://github.com/tokio-rs/axum/issues/50
  - https://docs.rs/aide/latest/aide/
  - https://libreddit.eu.org/r/rust/comments/qvluhi/still_cant_decide_between_actixweb_and_axum/
     - ~We've migrated from warp to Axum due to horrible compile times.~
  - https://libreddit.eu.org/r/rust/comments/11wk4o4/endtoend_tests_of_axum_web_server/
     - ~The book Zero To Production in Rust actually has a great example of testing the database for each test, as well as testing the code itself. Basically what you do is spin up a new database, have the test code interact with that database, and once the test ends, the database is dropped as well.~
*** Resources:
- https://blog.logrocket.com/real-time-chat-app-rust-react/
