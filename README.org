* tribes.rip
** Status:
*** 04-12-23:
- Considering writing the Blitzkrieg feature as React CRDT with storage via delayed commits to git.
- Considering writing the ~tribes.rip~ core features in ~carp~, as I find this more intriguing than Rust. And I like emacs, and would like a REPL for interacting with a communication platform, and designed in a framework that will be highly customizable and configurable, and something that can be at the root of all interactions. A realtime lisp, seems like the best, long term fit for such a use case.
  - (What ~Meta~ wanted to be, if only they knew lisp, and gave up a few dollars).
    #+ATTR_ORG: :width 150
    [[file:.images/2023-04-12_02-26-34_screenshot.png]]
*** 03-01-23:
- I don't think I care enough about this anymore currently, enough to take any action on this.
- I don't really want to touch GUIs (react).
- I don't think friends are really that important. I think just sticking people in LinkedIn is good enough. Referrals and comms are negligible, to maintain upkeep on "friends" and "network". It's better to just be someone like Elon Musk and just do some shit, maybe create a business out of it, and have your social interaction through work. Or do something like ThePrimeagean / Tech Lead, where your social is over YouTube - again, your business / work. I mean Tesla was just working on inventions, he didn't really need to maintain this diverse connection set, and even he got in contact with Edison - because he was "Too Good to Ignore - Cal Newport".
- I don't want to maintain this.
- I would like to do something more with Carp (lisp) on the backend, more than something like Rust.
  - However, Carp is in it's infancy, and I have no idea the debugging infrastructure (I doubt there's DAP), there's likely no LSP (just syntax highlighting via ~clojure-mode~), and I don't think many people would use it.
- It's likely not going to make me any money.
- I just don't give enuogh fucks, to do anything on this currently.

** Purpose
- Create a communication platform, that handles personal (Signal, Facebook), and Work (Linkedin), and frequent connections, and distant/infrequent connections.
- Can add people, tag them, and organize them in a graph (by group), and define communication via specified "queues".
   - EX: School, Work(Edmunds.com), etc.
** Potential Slogan Ideas:
- Best: ~Stay connected, on your terms.~
   - Eh: ~Connect with people, on your terms.~
   - Eh: ~Keep solicitors soliciting.~
   - Eh: ~Communication. But with boundaries~.
   - Eh: ~Boundaries. Like Jesus had.~
   - Eh: ~Boundaries. Like God intended.~

*** Other Ideas:
**** Design Philosophy:
- Design things in a way, where it re-inforces the user as the mental point of origin.
- Example: If deleting somebody from your graph, don't say "delete". Say something like "Cast out X to the wolves", and display some cool animation, where they get eaten alive or something.
   - Do things, that empowers the users choice, and makes them feel empowered, and ~responsible~. You better make damn sure you're kicking somebody out of your graph, because that motherfucker is just about to be devoured by some wolves. That is a life-or-death decision. Keep things high-stakes, so that responsibility of the user, remains high. And so that the user retains their self-respect, and ~sovereignty~
   
*** Main Differentiating Feature:
- People have to communicate to you through a "queue", and you can have various queues/message formats available.
   - EX: Send me your resume queue, that hold 5 messages, requires a 1 page pdf uploaded.
- Because you can set limitations/define how people interact with you, you can freely "add anybody" to your graph, and just restrict them to "only message me about projects", or something. Or allow them 1/message per year, where they can send you anything. So you can add people, put them in boxes/categories, and restrict access if you don't want to an open DM with them (which is why people don't just free-willingly add people, so they don't get spammed). But because with the queues/restrictions you can control comms, this allows the people you meet, to be kept in your graph, and you have that constant pulse/communication outlet with them, available if needed.   
  
** Features
- Profile page.
   - Queues (what avenues are available, for someone to contact you).
   - Links (crypto, email, etc). What is available, is dependent on what access you've given that person.
   - Anonymous messages supported (you define what they see, what they can send you).
   - Customizable profile page/profile tabs (can have a blog tab (iframe your blog), YouTube tab (iframe your YouTube channel).
   - Ability to send/receive payment (stripe, monero, etc). Can have a "queue" that is paid.
     - EX: "Resume Review": $5.
   - Hook into calendar, for scheduling. (EX: Call with me about X, can have blocked out times, using calendar, and give that to them to schedule).
   - Think of any other "profile" page feature, and it can likely be added (piletexod.us, gym feed, exercise feed, study feed, etc. Anything that can be tracked and displayed, can be shown). This can basically be a customizable/programmable super app: https://piped.kavin.rocks/watch?v=82PkhfvwxFc&list=PLZfuUWMTtMcC1DZF6HxJhqsGrBXu8Jzi7&index=31
      - Anything can be iframed, and thus apps can be embeded in your profile page.
- BlitzKrieg (main target is scrum teams) (Bewegungskrieg - https://old.reddit.com/r/MilitaryHistory/comments/qug054/is_the_blitzkrieg_an_actual_german_military/)
   - For an organization, use CRDT, list stories.
   - Skip Scrum standup, publish update in CRDT form for the day, and can list who you need to meet with to address blockers (can list what you want to talk about).
   - Have a scheduling algorithm, that say for a  1 hour time block, using some scheduling rules, schedules these for that block, so that everything in the scrum is addressed. Maybe link to a Video sharing link, or do p2p video.
   - Can publish daily progress, meeting links, to a git repo.
      - This fixes the 30-60 minute synchronous scrums. Instead, with Blitzkrieg, you have asynchronous scheduling of synchronous meetings, only with people who need to be there. Meetings are recorded, and CRDT data for that daily entry is recorded (for example, summaries of discussion). With the current way SCRUM works, you have to listen to stories you don't work on, and here about things you have nothing to do with, which saps productivity. An a ideal world, with blitzkrieg, you only meet with people you need to, about things you're working on, for a given purpose. This is the most efficient way. You just need a web app with CRDT to input what is needed to be addressed, and with who, and then the app will do scheduling. If scheduling needs to go outside the SCRUM synchronous time block, because tribes.rip has access to your calendar, you can schedule later in they day if possible, or even earlier to the day. (Scheduling does not need to be limited to a 1 hour SCRUM time block, but it can be a default, if earlier/later is not wanted, or not needed).
    - Market Research:
         - https://reclaim.ai/
         - https://timeto.morgen.so/
   - *Vision:* ~I want SCRUM ripped out of orgs. Replaced with async comms, and more iterative, fluid development.~
   
   
** Other things to consider
- Client/Server protocol. Run Server self-hosted or on VPS,etc. It stores your queue. Then you're client (Web/React, or emacs, cli), can download, process
- Self Host ability.
- Maybe do something with carp, so a realtime lisp can be used: https://github.com/carp-lang/Carp
  - Maybe with REPL, can live-update things.
- Maybe something with Rust/Go for a server.
- Maybe some deployment strategy, where you can roll out an A/B, so you can verify that your updated server logic works. (A basic way to control deployments).
- Save queue state to a file/DB, so that if restart, messages are not lost.
- Ability to send data back to sender of message.
  - "Read" notification.
  - "Queue" position value.
  - "Queue" velocity (how fast the person is processing your queue. For example, if it's at 0/20 for a week, you can ask if they can take a look at the queue, and process your message).
  - Maybe they only "looked at the title", and discarded the message. So you can know this (could be optional).
  - Optional statistics: Spent 5 minutes on your message.
- Ability to read a specific message in a queue (doesn't need to be FIFO). Can be a fixed sized array.
  - So you can just view a given message from someone, if needed.
- Add the "queue" aspect, to external ingestions.
  - YouTube, RSS, etc.
  - Can limit things. For example: Subscribe to this youtube channel, but only take 1 video/week, and stick it in my queue.
- DSL, to make configuring rules simpler.
- Ability to only get notified on certain queues.
  - People can see these. For example, I can only get notified for resumes/job oppurtunities/business ideas.
    - Any other queues, I won't get notified on. And there will be an icon to indicate this.
- PlainText configuration of graph, queues.
- Rust Queue is a CLI, that can be used.
- A ~Kill Count~ feature for queues.
  - Record how many times a message was rejected, because it didn't satisfy the requirmentss to participate it that queue.
- Add an ability, for ~devices~ to appear as entities (can sent/receive messages, appear in your graph, be assigned various trust levels/permissions)
  - ~carp~ complies to c for microcontrollers.
  - Provides an additional use case, such that it can be used as a communication platform (more general purpose, outside of just humans as actors).
  - Can be used for something like home-assistant.
- Have this handle all external connections/media - A "personal super app" for organizing external connections.
  - Quote app (save quotes, and view - helps with inspiration, avoding drain circling).
  - Music app (save snippets of favorite songs).
    - Modify speed, pitch, etc.
    - Share with others.
    - Host list on profile (like a public spotify profile).
- *Ability to interact with other messaging platforms*
  - EX: Have a Signal Messenger account, have some sort of chatGPT/AI thing, that responds for you.
    - So someone messages you, the ai responds that your queue is full.
      - And so then the message isn't forwarded to you.
    - Or if message can be sent, ask them your boundary questions.
      - Then the response you get, includes the message, and their responses to each of the boundary questions.
  - There could be one single autoresponder, and then shims between specific messenger platforms, so the autoresponder can respond for you, and guide the messages. So the autoresponder just looks at message content, and how to respond, and shims extract/translate the messenge content from the messengers (text, attachments, etc), to a common format the autoresponder can handle.
* How:
- Use whatever tech stack Obsidian is using: https://obsidian.md/
  - I believe this is React, and ReactNative for mobile.
** Rust backend messaging server, React front end.
- https://libreddit.eu.org/r/rust/comments/10u8euv/rest_api_framework_in_rust/
- https://libreddit.eu.org/r/rust/comments/vezbjf/createrustapp_added_ssr_templates_and_esbuild/
- https://libreddit.eu.org/r/rust/comments/s0g9x9/thoughts_on_poem_axum/
- https://github.com/Wulf/create-rust-app
- Use Axum (more popular, will have to skip create-rust-app)
  - https://github.com/tokio-rs/axum/issues/50
  - https://docs.rs/aide/latest/aide/
  - https://libreddit.eu.org/r/rust/comments/qvluhi/still_cant_decide_between_actixweb_and_axum/
     - ~We've migrated from warp to Axum due to horrible compile times.~
  - https://libreddit.eu.org/r/rust/comments/11wk4o4/endtoend_tests_of_axum_web_server/
     - ~The book Zero To Production in Rust actually has a great example of testing the database for each test, as well as testing the code itself. Basically what you do is spin up a new database, have the test code interact with that database, and once the test ends, the database is dropped as well.~
*** Resources:
- https://blog.logrocket.com/real-time-chat-app-rust-react/
- https://libreddit.eu.org/r/rust/comments/dyfmqu/message_queue_in_rust_anywhere/
- https://libreddit.eu.org/r/rust/comments/yd66z3/do_you_really_need_a_message_queue_handling/
- https://libreddit.eu.org/r/rust/comments/108qghf/how_to_call_from_rust_into_js_java_c_ruby_and/
- https://libreddit.eu.org/r/rust/comments/yx3k5s/are_there_any_crates_for_local_pubsub/
- https://libreddit.eu.org/r/rust/comments/j4fma4/how_to_handle_bringing_a_snapshot_of_state_up_to/
- https://libreddit.eu.org/r/rust/comments/119bztc/how_to_implement_message_passing_in_ffi/
- Can maybe use rust signal libraries, for encrypted messaging (dms, maybe private group threads):
   - https://github.com/nanu-c/axolotl/issues/943
      - https://github.com/signalapp/libsignal
      - https://github.com/whisperfish/presage
